 1.1	Purpose 
  Using Java/HTML-5(need to discuss), "Created a Game of Chess" with:
                                      1. Correct Chess Rule 
                                      2. Correct Chess class
                                      3. Correct way to move different type of chess
                                      4. An AI opponent
                                      5. Score board
                                      6. Move timer? (What will be the AI respond period?)
                                      7. Standard or other verify rule
                                      8. Move log- able to show move recorder 
                                      9. Able to detemine the winning situitation.
                                     
                                    With Test Plan and Test Result, list of record-defects 
                                    
Also , meet these requirment listed from the Project +1 doc from tracs

      1.	A user interface (ASCII text is fine, sprites, html images, etc.).      
      2.	There must be at least ONE form of AI implementation (up to user and sophistication is not critical).      
      3.	There must be user input (again, can be from a command prompt, mouse click, etc.).      
      4.	The game must begin from the normal starting position 
          and must complete when it has determined check mate.
      5.	You MAY use libraries/APIs, but you MAY NOT copy code.      
      6.	All documentation and code must be pushed to GitHub by everyone 
          as they complete work (exceptions need to be run by me).


1.2	Document Conventions
  Bullet and Number lists where used to list certain requirements. Other than that, natural languange sentences were used. 
1.3	Intended Audience and Reading Suggestions
  
1.4	Product Scope

1.5	References

2.	Overall Description
2.1	Product Perspective 
 Students sometimes need a bit of competition and entretainment to escape everyday stress. "A Game of Chess" 
is intending to do just that, while also providing a free and user friendly experience. 
2.2	Product Functions
 *The system must fulfill these tasks.
      .	A user interface (ASCII text is fine, sprites, html images, etc.).      
      .	There must be at least ONE form of AI implementation (up to user and sophistication is not critical).      
      .	There must be user input (again, can be from a command prompt, mouse click, etc.).      
      .	The game must begin from the normal starting position 
          and must complete when it has determined check mate.
      . The system will keep track of all moves made in the current game in chess notation. 
      . The system will also keep track of the score of the users that are playing. 
 *The system must let the user fulfill these tasks.
      . The user must be able to restart game at any time desired. 
      . The user must be able to select "chaos" mode shall he/she choose to. 
      . The user must be able to input name to track highscore. 
      
2.3	User Classes and Characteristics
2.4	Operating Environment
2.5	Design and Implementation Constraints
2.6	User Documentation
 A webpage will be linked with the download file linking the user to any chess tutorial they might desire. For the system,
 everything will be explained explicitly. 
2.7	Assumptions and Dependencies

3.	External Interface Requirements
3.1	User Interfaces
3.2	Hardware Interfaces
3.3	Software Interfaces
3.4	Communications Interfaces
4.	System Features
4.1	Chaos Chess Mode
4.1.1	Description and Priority
    The Chaos mode will randomize the pieces on both sides of the board giving each game a unique starting point. This 
    will give an added challenge by changing the standard chess strategies.
4.1.2	Stimulus/Response Sequences
4.1.3	Functional Requirements

4.2	Score Board
4.2.1	Description and Priority
    The score board will assign a score to each piece and accumulate points for each players based on what enemy pieces 
    they have defeated. Only the top 5 scores will be displayed and stored. 
    
4.3	Move History
4.3.1	Description and Priority
    The move history will keep track of the piece movments using the standard chess notation. 
    
4.4	Player Clock
4.4.1	Description and Priority
    only counts players time then they are playing. 2 modes â€“ normal chess clock counting down time left and time used 
    to show how fast the player is playing.

5.	Other Nonfunctional Requirements
5.1	Performance Requirements
.	The game must begin from the normal starting position or chaos mode position 
  and must complete when it has determined check mate.
5.2	Safety Requirements
5.3	Security Requirements
 The users are adviced to use nicknames or only their first names when recording their high scores since 
 their selected names will be being displayed to whoever gets to the scoreboard screen should they beat one 
 of the top 5 scores. 
5.4	Software Quality Attributes
5.5	Business Rules
6.	Other Requirements
Appendix A: Glossary
Appendix B: Analysis Models
Appendix C: To Be Determined List
