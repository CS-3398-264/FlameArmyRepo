
Test Plan
for

Project 1 ChessMate Application
Version 1.0 approved
Prepared by Team FlameArmy
March 8, 2018
 
1.1 Contents
REVISIONS	ii
1 INTRODUCTION	1
1.1 PURPOSE	1
1.2 SYSTEM OVERVIEW	1
1.3 DEFINITIONS, ACRONYMS AND ABBREVIATIONS	1
1.4 SUPPORTING MATERIALS	1
1.5 DOCUMENT OVERVIEW	1
2 ARCHITECTURE	2
2.1 OVERVIEW	2
2.2 COMPONENT 1..N	2
3 HIGH-LEVEL DESIGN	3
4 LOW-LEVEL DESIGN	4
4.1 MODULES OVERVIEW	4
4.2 MODULE SPECIFICATIONS	4
4.2.1 Module X1	4
4.2.2 Module X2	5
APPENDIX A – GROUP LOG	6
 

1.2 Introduction
The overall approach for testing ChessMate that will drive the testing for this software is Unit Testing, Integration Testing, and System Testing. 
1.2.1 Test Plan Objectives
The objective is to verify the following functions:
1.	1. Display the chess rules pertaining to this system.
2.	Allow the user to play a standard game of chess against an ai.
3.	Move chess pieces according to their respective class using mouse hardware.
4.	Move chess pieces according to their respective class using keyboard input.
5.	Allow the user to play against an AI
6.	The user can see the score board.
7.	Give the user an option to play chess under the constrain of a timer.
8.	Allow the user to see the move log of the game.
9.	The system has a button that allows the game to restart at any time.
10.	The system allows the alternative game type “Chaos” mode.
11.	The system records and displays the name and high score of an individual.


2.1 Test Strategy 
<For each of the following, you should explain how you plan on testing your application, provide a brief description, and possibly scenario/example of how you will accomplish that sort of test.  Some of these may not pertain to your application>
1.	Displaying the chess rules pertaining to this game.
a.	The tester shall check that the main menu has a button that pops up a JLablel.
b.	Tester Clicks the Button that displays the rules of the game. 
c.	The tester checks the output using Junit Testing
Example code:
	PrintStream oldOut = System.out;
	OutputStream os = new ByteArrayOutputStream();
	PrintStream ps = new PrintStream (os);
	System.setOut(ps)
	String output = new String(os.toString());
	System.setOut(oldout);
	assertTrue(output.contains(“Rules of regular chess game”);

2.	Allow the user to play a standard game of chess against an AI.
a.	The tester checks that the menu first displays the option to play against AI button “play AI”
b.	The tester checks if the GUI switches from the main menu to game mode for “Play AI”

3.	Move chess pieces according to their respective class using mouse hardware.
a.	The tester begins a game of type “Play AI” 
b.	The test moves each piece according to their class at least for three different ways for each.
c.	The test captures an AI chess piece to check if the pieces move to the right location.

4.	Move chess pieces according to their respective class using keyboard input.
a.	The test being a game of type “Play AI”
b.	The tester moves each piece according to their class at least in for different ways using keyboard input and not mouse input.
c.	The tester captures an AI chess piece to check if the piece move the right location.

5.	Allow the user to play against an AI
a.	The tester checks if in the main menu play “Play Button” 
b.	Test clicks the button to see if the it branches to the state where the player is playing the AI.

6.	The system allows the user to see the scoreboard.
a.	The tester checks if the main menu has a scoreboard display and clicks it.
b.	The tester checks if the scoreboard corresponds to the games he or she has played.
c.	The user checks that zero games have been played.
d.	The tester checks if the scoreboard displays the correct number of games after playing one game.
7.	Give the system allows the option to play chess under the constrain of a timer.
a.	The tester chooses a game of “Play AI Timed” to play against an AI.
b.	The tester determines if a loss of time results in a move lose.
c.	The tester lets the begins a timed game and forgoes all moves to check if it results in an AI win.
8.	 Allow the user to see the move log of the game.
a.	The tester begins a game a regular game of chess and inputs chess commands instead of using the mouse.
b.	The tester checks if the JUnit TextArea displays the history of the moves played.
       9   The system has a button that allows the game to restart at any time.
a.	The tester begins a regular game against the AI
b.	The tester confirms the game restarts during different states of the game.
c.	The tester begins a player vs player game.
d.	The tester confirms the restarts during different states of the game.

10.	The system allows the alternative game type “Chaos” mode.
a.	The tester checks if the menu has the option to place in Chaos mode.
b.	The tester begins a game in Chaos mode and records the positions of the chess pieces.
c.	The tester repeats a game in Chaos mode and records the positions of the chess pieces.

11.	The system records and displays the name and high score of an individual
a.	The tester checks if the main menu has the option to check if there is a high score menu
b.	The tester completes a game and checks the game score matches the number of games played in that session.

2.1.1 System Test
The approach for the system test is to test all components of the chess game are working correctly. The tester will play each game type at least one while checking the scoreboard matches the correct number of games. 
2.1.2 Stress/Performance Test
The tester will use negative testing approach to test how the chess game handles incorrect inputs.
1.	The tester plays a regular game and attempts to move pieces to positions not allowed by that piece.
2.	The tester attempts to move chess position into incorrect chessboard locations using keyboard input.
3.	The Tester uses attempts to stress the system by attempting to move pieces into incorrect positions several times
4.	The tester stresses the system by pressing different buttons multiple times.
2.1.3 Automated Test
The automated test will be performed using JUnit testing. The Tester will create at least one test case for each class and every function within that class.
3.1 Environment Requirements
The environment will take place using a laptop or Desktop with Windows 10. It will be performed using Java Eclipse ver. Oxygen to run the product and test the  game. Furthermore. There are hardware requirements. User will need a mouse or touch pad which perform the task of mouse cursor. 
4.1 Functions To Be Tested
<This section is critical for validation and needs to map the functions and requirements laid out in the SRS that need to be validated.>

Class ChessTimer 
startTime(), estimateTime(), restartTime(), returnInMin(), toMinutes(long millis)

Rook Class
Rook(booean taken2, String image2)

Bishop
Bishop(Boolean taken2, String image2)

Chessboard
Chessboard()

King Class
King(Boolean taken, String image)

Knight Class
Knight(Boolean taken, String image)

Pawn Class
Pawn(Boolean taken, String image)
SetProm(Boolean status)

Piece Class
Piece(Boolean taken2, String image2)
setTaken(boolean taken)
setImage(String image)

Queen Class
Queen(boolean taken2, String image2)

